<?php
class TBT_Rewards_Model_Observer_Sales_Convert_Quotetoorder
{
	public function __construct() { }
	
	
    /**
    * Applies the special price percentage discount
    * @param   Varien_Event_Observer $observer
    * @return  Xyz_Catalog_Model_Price_Observer
    */
    public function prepareCatalogPointsTransfers($observer)
    {
        /**/ Mage::log('PREPARE CATALOG');
        $event = $observer->getEvent();
        
        $quote = $event->getQuote();
        
        if (!$quote) {
            return $this;
        }
        $order_items = $quote->getAllItems();
        
        $catalog_transfers = Mage::getSingleton('rewards/observer_sales_catalogtransfers');
        foreach ($order_items as $item) {
            $earned_point_totals = (array) json_decode(base64_decode($item->getEarnedPointsHash()));
            if ($earned_point_totals) {
                /**/ Mage::log('  saving earned ['. json_encode($earned_point_totals) .']');
                $catalog_transfers->addItemPoints($earned_point_totals);
            }
            
//            $redeemed_point_totals = (array) json_decode(base64_decode($item->getRedeemedPointsHash()));
//            if ($redeemed_point_totals) {
//                /**/ Mage::log('  saving redeemed ['. json_encode($redeemed_point_totals) .']');
//            	$catalog_transfers->addItemPoints($redeemed_point_totals);
//            }
        }
        
        $cart_redemptions = Mage::getSingleton('rewards/observer_sales_carttransfers');
        $cart_redemptions->setRedemptionRuleIds( explode(',', $quote->getCartRedemptions()) );
        /**/ Mage::log('  redemption rules : ['. $quote->getCartRedemptions() .'] : '. json_encode( explode(',', $quote->getCartRedemptions()) ));
        
        $quote->reserveOrderId();
        $catalog_transfers->setIncrementId($quote->getReservedOrderId());
        
        /**/ Mage::log('  DONE preparing catalog');
        
        return $this;
    }
}
