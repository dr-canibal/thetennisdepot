<?php
/**
 * WDCA - Sweet Tooth
 * 
 * NOTICE OF LICENSE
 * 
 * This source file is subject to the WDCA SWEET TOOTH POINTS AND REWARDS 
 * License, which extends the Open Software License (OSL 3.0).
 * The Sweet Tooth License is available at this URL: 
 *      http://www.wdca.ca/sweet_tooth/sweet_tooth_license.txt
 * The Open Software License is available at this URL: 
 *      http://opensource.org/licenses/osl-3.0.php
 * 
 * DISCLAIMER
 * 
 * By adding to, editing, or in any way modifying this code, WDCA is 
 * not held liable for any inconsistencies or abnormalities in the 
 * behaviour of this code. 
 * By adding to, editing, or in any way modifying this code, the Licensee
 * terminates any agreement of support offered by WDCA, outlined in the 
 * provided Sweet Tooth License. 
 * Upon discovery of modified code in the process of support, the Licensee 
 * is still held accountable for any and all billable time WDCA spent 
 * during the support process.
 * WDCA does not guarantee compatibility with any other framework extension. 
 * WDCA is not responsbile for any inconsistencies or abnormalities in the
 * behaviour of this code if caused by other framework extension.
 * If you did not receive a copy of the license, please send an email to 
 * contact@wdca.ca or call 1-888-699-WDCA(9322), so we can send you a copy 
 * immediately.
 * 
 * @category   [TBT]
 * @package    [TBT_Rewards]
 * @copyright  Copyright (c) 2009 Web Development Canada (http://www.wdca.ca)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
*/

/**
 * Observer Sales Order Save After Create
 *
 * @category   TBT
 * @package    TBT_Rewards
 * @author     WDCA Sweet Tooth Team <contact@wdca.ca>
 * @throws	   Mage_Core_Exception
 */
class TBT_Rewards_Model_Observer_Sales_Order_Save_After_Create
{
	public function __construct() { }
		
    /**
	* This observer creates points transfers associated with an order when the order is made.
    * This observer should only ever be dispatched on the saving of an order immediately
	* after its creation.
    * @param   Varien_Event_Observer $observer
    * @return  Xyz_Catalog_Model_Price_Observer
    */
    public function createPointsTransfers($observer)
    {
        $event = $observer->getEvent();
        $order = $event->getOrder();
        
        if (!$order) {
            return $this;
        }
        
        $catalog_transfers = Mage::getSingleton('rewards/observer_sales_catalogtransfers');
        if ($order->getIncrementId() == $catalog_transfers->getIncrementId()) {
            foreach ($catalog_transfers->getAllEarnedPoints() as $earned_point_totals) {
                if (!$earned_point_totals) {
                    continue;
                }
                
                foreach ($earned_point_totals as $transfer_points) {
                	$transfer_points = (array) $transfer_points;
                	try {
	                    $is_transfer_successful = Mage::helper('rewards/transfer')->transferOrderPoints(
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_AMT]
	                                * $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_APPLICABLE_QTY],
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_CURRENCY_ID],
	                            $order->getId(),
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_RULE_ID]
	                    );
                    } catch (Exception $ex) {
                        throw new Mage_Core_Exception($ex->getMessage());
                    }
                    
                    /* WDCA: I don't think we want these messages to appear, but we might find in the
                     * future that we actually do, so I left it in. */ 
//                    if ($is_transfer_successful) {
//                        Mage::getSingleton('core/session')->addSuccess(
//                            Mage::helper('rewards')->__('Successfully cancelled transfer ID #'. $transfer->getId())
//                        );
//                    }
//                    else {
//                        Mage::getSingleton('core/session')->addError(
//                            Mage::helper('rewards')->__('Could not successfully revoke points associated with cancelled order.')
//                        );
//                    }
                }
            }
            $catalog_transfers->clearEarnedPoints();
            
            foreach ($catalog_transfers->getAllRedeemedPoints() as $redeemed_point_totals) {
                if (!$redeemed_point_totals) {
                    continue;
                }
                
                foreach ($redeemed_point_totals as $transfer_points) {
                    $transfer_points = (array) $transfer_points;
                    try {
	                    $is_transfer_successful = Mage::helper('rewards/transfer')->transferOrderPoints(
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_AMT]
	                                    * $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_APPLICABLE_QTY]
	                                    * -1,
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_CURRENCY_ID],
	                            $order->getId(),
	                            $transfer_points[TBT_Rewards_Model_Catalogrule_Rule::POINTS_RULE_ID]
	                    );
                    } catch (Exception $ex) {
                        throw new Mage_Core_Exception($ex->getMessage());
                    }
                }
            }
            $catalog_transfers->clearRedeemedPoints();
            
            $catalog_transfers->clearIncrementId();
        }
        
        $cart_transfers = Mage::getSingleton('rewards/observer_sales_carttransfers');
        if ($order->getIncrementId() == $cart_transfers->getIncrementId()) {
        	foreach ($cart_transfers->getAllCartPoints() as $cart_points) {
        		if (!$cart_points) {
        			continue;
        		}
        		
        		try {
                    $is_transfer_successful = Mage::helper('rewards/transfer')->transferOrderPoints($cart_points['amount'], $cart_points['currency'], $order->getId(), $cart_points['rule_id']);
        		} catch (Exception $ex) {
                    throw new Mage_Core_Exception($ex->getMessage());
        	    }
        	}
        	
        	foreach ($cart_transfers->getRedemptionRuleIds() as $rule_id) {
        		try {
                    $points = Mage::helper('rewards/transfer')->calculateCartPoints($rule_id, $order->getAllItems(), true);
        		} catch (Exception $e) {
        			die ($e->getMessage());
        		}
	            
	            if (is_array($points)) {
	            	try {
                        $is_transfer_successful = Mage::helper('rewards/transfer')->transferOrderPoints($points['amount'], $points['currency'], $order->getId(), $rule_id);
	            	} catch (Exception $ex) {
                        throw new Mage_Core_Exception($ex->getMessage());
	            	}
	            }
        	}
        	
        	$earned_points_string = $cart_transfers->getEarnedPointsString();
        	$redeemed_points_string = $cart_transfers->getRedeemedPointsString();
        	
        	if ($earned_points_string) {
                Mage::getSingleton('core/session')
                    ->addSuccess( Mage::helper('rewards')->__('You have earned the following points on this order: ')
                        . $earned_points_string);
        	}
        	if ($redeemed_points_string) {
        		Mage::getSingleton('core/session')
                    ->addSuccess( Mage::helper('rewards')->__('You have spent the following points on this order: ')
                        . $redeemed_points_string);
        	}
        	if ( count($cart_transfers->getAllCartPoints()) ) {
        		Mage::getSingleton('core/session')
                    ->addSuccess( Mage::helper('rewards')->__('Your point transactions are currently pending and will be approved '
                        .'when we finish processing your order.') );
        	}
        	
        	$cart_transfers->clearIncrementId();
        	$cart_transfers->clearCartPoints();
        }
        
        return $this;
    }
}
